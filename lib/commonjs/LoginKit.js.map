{"version":3,"sources":["LoginKit.ts"],"names":["LoginState","UserDataScopes","LoginKit","NativeModules"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;IACYA,U;AAwBZ;AACA;AACA;AACA;AACA;;;;WA5BYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,0BAAAA,U;;IA6BAC,c;AAYZ;AACA;AACA;;;;WAdYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;AAqNZ,MAAMC,QAAsB,GAAGC,2BAAcD,QAA7C","sourcesContent":["import { NativeModules } from 'react-native';\n\n/**\n * An enum representing the different Login states.\n */\nexport enum LoginState {\n  /**\n   * Called when the login request has started after the user has confirmed they want to approve the third party for\n   * access to the scopes listed.\n   */\n  LOGIN_KIT_LOGIN_STARTED = 'LOGIN_KIT_LOGIN_STARTED',\n\n  /**\n   * Called when login through Snapchat has succeeded.\n   */\n  LOGIN_KIT_LOGIN_SUCCEEDED = 'LOGIN_KIT_LOGIN_SUCCEEDED',\n\n  /**\n   * Called when login through Snapchat has failed.\n   */\n  LOGIN_KIT_LOGIN_FAILED = 'LOGIN_KIT_LOGIN_FAILED',\n\n  /**\n   * Called whenever the User explicitly logs out via `clearToken()` or whenever the server returns `401`, requiring\n   * forced logout.\n   */\n  LOGIN_KIT_LOGOUT = 'LOGIN_KIT_LOGOUT',\n}\n\n/**\n * An enum representing the different scopes your app can access. Scopes let your application declare which Login Kit\n * features it wants access to. If a scope is toggleable, the user can deny access to one scope while agreeing to grant\n * access to others.\n */\nexport enum UserDataScopes {\n  /**\n   * Grants access to the user's Snapchat display name.\n   */\n  DISPLAY_NAME = 'https://auth.snapchat.com/oauth2/api/user.display_name',\n\n  /**\n   * Grants access to the user's Bitmoji avatar; toggleable by user.\n   */\n  BITMOJI_AVATAR = 'https://auth.snapchat.com/oauth2/api/user.bitmoji.avatar',\n}\n\n/**\n * An interface representing the data model related to the active (connected) Snapchat User.\n */\nexport interface UserData {\n  /**\n   * The public display name of the user.\n   */\n  displayName?: string;\n\n  /**\n   * The unique identifier for this user on your app.\n   */\n  externalId?: string;\n\n  /**\n   * The public profile link for this Snapchat user.\n   */\n  profileLink?: string;\n\n  /**\n   * The bitmoji avatar id.\n   */\n  bitmojiId?: string;\n\n  /**\n   * The bitmoji url of the user.\n   * @deprecated use 'bitmojiAvatar' instead.\n   */\n  bitmojiSelfie?: string;\n\n  /**\n   * The bitmoji url of the user.\n   */\n  bitmojiAvatar?: string;\n\n  /**\n   * A JSON blob representing the bitmoji sticker data.\n   */\n  bitmojiPacksJson?: string;\n}\n\n/**\n * An interface representing the successful return response for the `verify()` and `verifyAndLogin()` calls.\n *\n * Note: A successful Verify response doesn't confirm if the phone number has been verified. You still need to make the\n * Server API call to confirm the result of the verification.\n */\nexport interface VerifyResponse {\n  /**\n   * A phone ID generated for the phone number and used to check that the number was successfully verified by Snapchat.\n   */\n  phoneId: string | null;\n\n  /**\n   * A verify ID generated for the verify request and used with the `phoneId` to check if the phone number was\n   * successfully verified by Snapchat.\n   */\n  verifyId: string | null;\n}\n\nexport type LoginKitType = {\n  /**\n   * Begins the authentication flow using OAuth by linking into the Snapchat app. If the user does not have the Snapchat app installed,\n   * it will open up a WebView to Snapchatâ€™s web authentication page.\n   *\n   * You can register for `LoginState` updates using the `DeviceEventEmitter`, for example:\n   * <pre>\n   *   const eventCallbackLoginStarted = () => {\n   *      // handle event emitted\n   *    };\n   *\n   *  // Subscribing to event\n   *  const loginStartedListener = DeviceEventEmitter.addListener(\n   *     LoginState.LOGIN_KIT_LOGIN_STARTED,\n   *     eventCallbackLoginStarted\n   *   );\n   *\n   *  // Unsubscribing to event\n   *  loginStartedListener.removeListener();\n   * </pre>\n   *\n   * @returns Promise resolves when login is successful or rejects when login fails.\n   */\n  login(): Promise<void>;\n\n  /**\n   * Checks if the user is authenticated using Snapchat and has a valid auth token.\n   *\n   * @returns Promise resolves `true` if the user is authenticated using Snapchat, `false` otherwise.\n   */\n  isUserLoggedIn(): Promise<boolean>;\n\n  /**\n   * Returns the current local access token for the logged in user.\n   *\n   * Note: If this method returns null, the access token may need to be refreshed by calling `refreshAccessToken()`.\n   *\n   * @returns Promise resolves `null` if there is no access token or the access token.\n   */\n  getAccessToken(): Promise<string | null>;\n\n  /**\n   * Refreshes the user's access token.\n   *\n   * @returns Promise resolves with the new access token or rejects if an access token cannot be refreshed.\n   */\n  refreshAccessToken(): Promise<string>;\n\n  /**\n   * Method to clear the access token. This method is used for logging out the user.\n   */\n  clearToken(): void;\n\n  /**\n   * Determines whether the user has authorized the current session to have access to resources with the requested scope.\n   *\n   * @param scope the scope to check access.\n   *\n   * @returns Promise resolves `true` if the current session has access to resources with the scope, `false` otherwise.\n   */\n  hasAccessToScope(scope: UserDataScopes): Promise<boolean>;\n\n  /**\n   * Method to fetch user data based on the scopes requested.\n   *\n   * @param query     GraphQL query to request user data.\n   * @param variables Record of variables for your GraphQL request.\n   *\n   * @returns Promise resolves with returned user data or rejects if there was an issue fetching the data.\n   */\n  fetchUserData(\n    query: string,\n    variables: Record<string, any> | null\n  ): Promise<UserData>;\n\n  /**\n   * Start the flow for Verify with Snapchat.\n   *\n   * This checks an inputted phone number and verify that it matched the one on file for the user's Snapchat account.\n   * Users will be redirected to Snapchat to verify their phone number; once the number has been confirmed, user will\n   * return back to the app.\n   *\n   * Note: This API is currently only supported on iOS.\n   *\n   * @param phoneNumber A phone number with appropriate area codes that needs to be verified.\n   *                    <p>\n   *                    This should follow the <b>National Format</b> specified by the\n   *                    <a href=\"https://www.itu.int/rec/T-REC-E.123-200102-I/en\">ITU-T Recommendation E.123</a>.\n   *                    <p>\n   *                    For example, <b><i>(302) 123-4567</i></b> is the National Format for this International Number\n   *                    <b><i>+1 (302) 123-4567</i></b>.\n   *                    <p>\n   *                    Note that the number doesn't specifically need to be formatted with Parentheses, Hyphens,\n   *                    Spaces, or other separating symbols and so <b><i>3021234567</i></b> will also work.\n   *\n   * @param countryCode The two-letter country code (as per the\n   *                    <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a>\n   *                    ) in upper-case that represents the country this phone number applies to.\n   *                    <p>\n   *                    For example, <b><i>US</i></b> is the country code for this International Number\n   *                    <b><i>+1 (302) 123-4567</i></b>.\n   *\n   * @returns Promise resolves with returned verify response or rejects if there was an issue during verification.\n   */\n  verify(phoneNumber: string, countryCode: string): Promise<VerifyResponse>;\n\n  /**\n   * Start the flow for Verify and Login with Snapchat.\n   *\n   * This checks an inputted phone number and verify that it matched the one on file for the user's Snapchat account.\n   * Users will be redirected to Snapchat to verify their phone number; once the number has been confirmed, they will\n   * be redirected to the Login / OAuth modal. After authorization, user will return back to the app.\n   *\n   * Note: This API is currently only supported on iOS.\n   *\n   * @param phoneNumber A phone number with appropriate area codes that needs to be verified.\n   *                    <p>\n   *                    This should follow the <b>National Format</b> specified by the\n   *                    <a href=\"https://www.itu.int/rec/T-REC-E.123-200102-I/en\">ITU-T Recommendation E.123</a>.\n   *                    <p>\n   *                    For example, <b><i>(302) 123-4567</i></b> is the National Format for this International Number\n   *                    <b><i>+1 (302) 123-4567</i></b>.\n   *                    <p>\n   *                    Note that the number doesn't specifically need to be formatted with Parentheses, Hyphens,\n   *                    Spaces, or other separating symbols and so <b><i>3021234567</i></b> will also work.\n   *\n   * @param countryCode The two-letter country code (as per the\n   *                    <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2</a>\n   *                    ) in upper-case that represents the country this phone number applies to.\n   *                    <p>\n   *                    For example, <b><i>US</i></b> is the country code for this International Number\n   *                    <b><i>+1 (302) 123-4567</i></b>.\n   *\n   * @returns Promise resolves with returned verify response or rejects if there was an issue during verification.\n   */\n  verifyAndLogin(\n    phoneNumber: string,\n    countryCode: string\n  ): Promise<VerifyResponse>;\n};\n\nconst LoginKit: LoginKitType = NativeModules.LoginKit;\nexport { LoginKit };\n"]}